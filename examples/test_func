var a = 1;

func add3(a, b, c) {
    var b = a + b + c;
	return b + 1 - 1;
}

func fibonacci(n) {
    var a = 0;
    var b = 1;
    var c = 0;
    var sum = 0;
    var count = n;

    while count > 0 {
        count = count - 1; 
        a = b ;
        b = sum; 
        sum = a + b;
    }
    return sum;
}

#expect(a == 1, "a == ", a);
#expect(add3(1, 10, 100) == 111, "add3(1, 10, 100) == ", add3(1, 10, 100));

func fizzbuzz(i)
{
    var a = i % 3 == 0;
    var b = i % 5 == 0;
    if a and b
    {
        var c = a and b;
        expect(c, "Fizzbuzz c =", c);
    }
    else if a
    {
        var c = a and !b;
        expect(c, "Fizzc =", c);
    }
    else if b
    {
        var c = !a and b;
        expect(c, "Buzzc =", c);
    }
}

fizzbuzz(15);

func fibonacci_fizzbuzz(n) {
    var a = 0;
    var b = 1;
    var c = 0;
    var sum = 0;
    var count = 1;
    while count <= n {
        count = count + 1; 
        var d = count;
        fizzbuzz(d);
        a = b;
        b = sum; 
        sum = a + b;
    }
    return sum;
}

a = fibonacci_fizzbuzz(30);
expect(a == 832040, "fibonacci_fizzbuzz(30) = ", a);


var global = 0;

func count(a) {
    if a <= 0 { 
        return 0; 
    }
    global += 1;
    return count(a-1) + 1;
}

a = count(1000);
expect(a == 1000, "count(1000) = ", a);
expect(global == a, "global = ", global);

func call_func(a, x) {
    return a(x);
}

f = count;
a = call_func(f, 1000);
expect(a == 1000, "call_func(count, 1000) = ", a);

a = call_func(count, 1000);
expect(a == 1000, "call_func(count, 1000) = ", a);





